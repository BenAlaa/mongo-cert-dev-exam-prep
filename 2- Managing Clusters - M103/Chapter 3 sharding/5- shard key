the indexed field(s) used to partition collection on shards

used to determine the inclusive lower bound and the execlusive upper bound <=     >

- must be present on every document and inserted document and be indexed first
- cannot be changed after sharding (cannot specify another key or update a value for that key in any document)
- cannot unshard a collection unless dropped and restored again

how to shard:
1- use sh.enableSharding("<database>")
2- db.collection.createIndex() to create Index on shard keys
3- sh.shardCollection("db.collection", {shard key: 1})

choosing shard key:
- write distribution
    - cardinality   the higher the better (possible more unique values)
    - frequency     the lower the better (low repetition of a given unique key value)
    - monotonic change   like a counter - time stamp - objectId ... should be avoided
- read Isolation:
    - the key should be used frequently in query operations to direct the router to it (faster reading)

Hashed shard key:
====================
- Like hash tables, the key is hashed and the hash is used to distribute the data
- use when:
    - ex: monotonic changed keys
- drawbacks: 
    - range query is scatter gathered
    - cannot support zone sharding (geography)
    - must be single non-array field
    - don't support fast sorting
- how to:
  1- db.collection.createIndex({"field": "hashed"})
  2- sh.shardCollection("db.collection", {field: "hashed"})

