$$ROOT is the entire document currently in the pipline

1- $multiply: 
    - {$multiply: [val1, val2, ....]}

2- $divide: 
    - {$divide: [val1, val2, ...]}

3- $split:
    - { $split: [ <string expression>, <delimiter> ] }
    - result: [] of splitted words

4- $size:
    - { $size: <expression> } must be an array
    - result: number (length of array)

5- $map: 
    - { $map: { input: <expression>, as: <string>, in: <expression> } }
    input: An expression that resolves to an array.
    as: Optional. A name for the variable that represents each individual element of the input array. 
        If no name is specified, the variable name defaults to this.
    in: An expression that is applied to each element of the input array. The expression references each 
        element individually with the variable name specified in as.
    - result: transformed array

6- $arrayElemAt:
    - { $arrayElemAt: [ <array>, <idx> ] }
    - result: returns the element at the index

7- $setIntersection:
    - { $setIntersection: [ <array1>, <array2>, ... ] }
    - result: Takes two or more arrays and returns an array that contains 
        the elements that appear in every input array.

8- $avg:
    - {$avg: [<expression>, <expression>, ...]}

9- $cond:
    - {$cond: [{<condition>}, {then}, {else}]}

10- $isArray:
    - {$isArray: <expression>}
    - result: bool

11- $reduce:
    - {$reduce: {input: "", initialValue: "", in: <expression>}}
    - input: array
    - intialValue: as a start (-Infinity)
    - in: logic to resolve the result
    - $$this: current element
    - $$value: accumulated value
    - result: accumulated value from the array

12- $trunc: 
    - { $trunc: <expression> }
    - expression must be a number
    - truncates the decimal part

13- $dateToString:
    - { $dateToString: { date: "expression to give date", format: "%Y-%m-%d" } }

14- $filter:
    - {
        $filter: {
            input: "expression gives array",
            as: "name to be used in cond defaut(this)",
            cond: "An expression that resolves to a boolean value"
        }
    }
15- $literal:
    - { $literal: <value> }
    - Returns a value without parsing. Use for values that the aggregation pipeline may 
        interpret as an expression.
    - { $literal: { $add: [ 2, 3 ] } } -> Gives ->  { "$add" : [ 2, 3 ] }